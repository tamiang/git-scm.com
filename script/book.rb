# frozen_string_literal: true

require 'fileutils'
require 'yaml'

class Book
  @@all_books = {
    "az" => "progit2-aze/progit2",
    "be" => "progit/progit2-be",
    "bg" => "progit/progit2-bg",
    "cs" => "progit-cs/progit2-cs",
    "de" => "progit/progit2-de",
    "en" => "progit/progit2",
    "es" => "progit/progit2-es",
    "fr" => "progit/progit2-fr",
    "gr" => "progit2-gr/progit2",
    "id" => "progit/progit2-id",
    "it" => "progit/progit2-it",
    "ja" => "progit/progit2-ja",
    "ko" => "progit/progit2-ko",
    "mk" => "progit2-mk/progit2",
    "ms" => "progit2-ms/progit2",
    "nl" => "progit/progit2-nl",
    "pl" => "progit2-pl/progit2-pl",
    "pt-br" => "progit/progit2-pt-br",
    "pt-pt" => "progit2-pt-pt/progit2",
    "ru" => "progit/progit2-ru",
    "sl" => "progit/progit2-sl",
    "sr" => "progit/progit2-sr",
    "tl" => "progit2-tl/progit2",
    "tr" => "progit/progit2-tr",
    "sv" => "progit2-sv/progit2",
    "uk" => "progit/progit2-uk",
    "uz" => "progit/progit2-uz",
    "zh" => "progit/progit2-zh",
    "zh-tw" => "progit/progit2-zh-tw",
    "fa" => "progit2-fa/progit2"
  }

  def self.all_books
    @@all_books
  end

  attr_accessor :chapters
  attr_accessor :sha

  def initialize(edition, language_code)
    @edition = edition
    @language_code = language_code
    @chapters = []
  end

  def front_matter
    front_matter = {
      "category" => "book",
      "section" => "documentation",
      "subsection" => "book",
      "sidebar" => "book",
      "book" => {
        "language_code" => @language_code
      }
    }
  end

  def content_note
    "### DO NOT EDIT! Generated by script/update-book2.rb"
  end

  def wrap_front_matter(front_matter)
    "#{front_matter.to_yaml.sub("---\n", "---\n#{self.content_note}\n")}---\n"
  end

  def absolute_path(path)
    File.absolute_path(File.join(File.dirname(__FILE__), "..", "external", "book", "content", "book", @language_code, "v#{@edition}", path))
  end

  def removeAllFiles
    FileUtils.rm_rf(absolute_path("."))
  end
end

class Chapter
  def initialize(book)
    @book = book
    @sections = []
  end

  def front_matter
    front_matter = @book.front_matter
    front_matter["book"]["chapter"] = {
      "title" => self.title,
      "number" => self.chapter_number
    }
    return front_matter
  end

  def wrap_front_matter(front_matter)
    @book.wrap_front_matter(front_matter)
  end

  attr_accessor :title
  attr_accessor :chapter_type
  attr_accessor :chapter_number
  attr_accessor :sha
  attr_accessor :sections

  def absolute_path(path)
    return @book.absolute_path(path)
  end

  def save
    # TODO
  end
end

class Section
  def initialize(chapter)
    @chapter = chapter
  end

  def front_matter
    front_matter = @chapter.front_matter
    front_matter["title"] = "Git - #{self.title}"
    front_matter["book"]["section"] = {
      "title" => self.title,
      "number" => @section_number
    }
    return front_matter
  end

  attr_accessor :title
  attr_accessor :html
  attr_accessor :slug

  def set_slug
    if self.title.empty?
      title = @chapter.title
    else
      title = (@chapter.title + "-" + self.title)
    end
    self.slug = title.gsub(/\(|\)|\./, "").gsub(/\s+/, "-").gsub("&#39;", "-")
  end

  def absolute_path(path)
    return @chapter.absolute_path(path)
  end

  def save
    return if self.slug.nil?

    path = self.absolute_path(self.slug)
    FileUtils.mkdir_p(File.dirname(path))
    File.open("#{path}.html", 'w') do |file|
      file.write(@chapter.wrap_front_matter(self.front_matter))
      file.write(self.html.strip)
    end
  end
end
